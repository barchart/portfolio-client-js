const moment = require('moment');

const utilities = require('barchart-marketdata-utilities');

const assert = require('common/lang/assert'),
	is = require('common/lang/is'),
	memoize = require('common/lang/memoize'),
	timezone = require('common/lang/timezone');

const Quote = require('./../market/Quote');

module.exports = (() => {
	'use strict';

	const leftPad = memoize.simple((value) => {
		return ('00' + value.toString()).substr(-2);
	});

	const getTimezoneDisplay = memoize.simple((timezoneName) => {
		return moment().tz(timezoneName).format('z').replace(/^([A-Z])(D|S)([A-Z])$/, '$1$3');
	});

	const formatDate = (timestamp, timezoneName) => {
		if (!timestamp) {
			return '';
		}

		const m = moment.tz(timestamp, timezoneName);

		return leftPad(m.month() + 1) + '/' + leftPad(m.date()) + '/' + leftPad(m.year());
	};

	const formatTime = (timestamp, timezoneName) => {
		if (!timestamp) {
			return '';
		}

		const m = moment.tz(timestamp, timezoneName);

		return leftPad(m.hours()) + ':' + leftPad(m.minutes()) + ' ' + getTimezoneDisplay(timezoneName);
	};

	/**
	 * Utilities for generating timezone-aware, human-readable timestamps.
	 *
	 * @public
	 * @module utilities/dates
	 */
	return {
		/**
		 * Generates a timezone-aware, human-readable date from a timestamp.
		 *
		 * @public
		 * @param {Date|number} timestamp - The timestamp to format.
		 * @param {string=} timezoneName - The timezone the date will be displayed in.
		 * @returns {string}
		 */
		formatDate: function(timestamp, timezoneName) {
			return formatDate(timestamp, timezoneName);
		},

		/**
		 * Generates a timezone-aware, human-readable date from a timestamp.
		 *
		 * @public
		 * @param {Date|number} timestamp - The timestamp to format.
		 * @param {string=} timezoneName - The timezone the time will be displayed in.
		 * @returns {string}
		 */
		formatTime: function(timestamp, timezoneName) {
			return formatTime(timestamp, timezoneName);
		},

		/**
		 * Given a {@link Quote} object, outputs the appropriate human-readable
		 * timestamp. Depending on the state of the quote, the output may be a
		 * time (e.g. "09:31 CT") or a date (e.g. "06/28/2017").
		 *
		 * @public
		 * @param {Quote} quote - The {@link Quote} instance to generate a human-readable timestamp for.
		 * @param {string=} timezoneName - The timezone the time will be displayed in.
		 * @returns {string}
		 */
		formatQuoteTime: function(quote, timezoneName) {
			if (!(quote instanceof Quote)) {
				return '';
			}

			const t = quote.timeActual;

			if (!t) {
				return '';
			} else {
				if (!quote.lastPrice || quote.flag || quote.sessionT) {
					return formatDate(t, timezoneName);
				} else {
					return formatTime(t, timezoneName);
				}
			}
		}
	};
})();