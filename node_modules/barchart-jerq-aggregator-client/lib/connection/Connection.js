const utilities = require('barchart-marketdata-utilities');

module.exports = (() => {
	'use strict';

	/**
	 * The entry point for interacting with the JERQ Aggregator (a streaming
	 * market data server). An instance of this class is responsible managing
	 * a connecting to the server, sending commands to the server, parsing
	 * the data feed from the server, and maintaining a cache of market
	 * data (see {@link Exchange}, {@link Quote}, and {@link Profile}).
	 *
	 * @interface
	 */
	class Connection {
		constructor() {

		}

		connect(host, secure, port) {
			throw new Error('The "connect" function has not been implemented.');
		}

		disconnect() {
			throw new Error('The "disconnect" function has not been implemented.');
		}

		on(event, eventHandler) {
			throw new Error('The "on" function has not been implemented.');
		}

		off(event, eventHandler) {
			throw new Error('The "off" function has not been implemented.');
		}

		request(requestType, requestData) {
			throw new Error('The "request" function has not been implemented.');
		}

		getSubscribed(symbol) {
			throw new Error('The "getSubscribed" function has not been implemented.');
		}

		getHost() {
			throw new Error('The "getHost" function has not been implemented.');
		}

		getIsSecure() {
			throw new Error('The "getIsSecure" function has not been implemented.');
		}

		getPort() {
			throw new Error('The "getPort" function has not been implemented.');
		}

		getConnectionState() {
			throw new Error('The "getConnectionState" function has not been implemented.');
		}

		getMarketState() {
			throw new Error('The "getMarketState" function has not been implemented.');
		}

		/**
		 * Returns information regarding the subscribed symbols. Two sets of symbols are
		 * returns. The first set describes the symbols which are in the local client cache.
		 * The second set describes the symbols which the server is feeding to the client.
		 * These sets should always be identical.
		 *
		 * @public
		 * @returns {Promise}
		 */
		getSubscriptionStatus() {
			throw new Error('The "getSubscriptionStatus" function has not been implemented.');
		}

		getServerVersion() {
			throw new Error('The "getServerVersion" function has not been implemented.');
		}

		getRealtime() {
			throw new Error('The "getRealtime" function has not been implemented.');
		}

		toString() {
			return '[Connection]';
		}

		/**
		 * For internal use only. This function extracts and formats the symbols passed to
		 * an invocation of {@link Connection#on} or {@link Connection.off}.
		 *
		 * @protected
		 * @ignore
		 * @returns {string[]} - The symbols extracted from the igulp tesnvocation arguments.
		 */
		static getSymbols() {
			let returnRef;

			let originalArguments = arguments[0];

			if (originalArguments[2] instanceof Array) {
				returnRef = originalArguments[2];
			} else if (originalArguments.length > 2) {
				returnRef = [];

				for (let i = 2; i < originalArguments.length; i++) {
					returnRef.push(originalArguments[i]);
				}
			} else {
				returnRef = [];
			}

			for (let j = 0; j < returnRef.length; j++) {
				returnRef[j] = utilities.symbolFormatter.format(returnRef[j]);
			}

			return returnRef;
		}

		/**
		 * For internal use only. This function extracts indicates if a symbol
		 * exists within an event map.
		 *
		 * @protected
		 * @ignore
		 * @returns {Boolean}
		 */
		static getSubscribed(symbol, maps) {
			return maps.some((map) => {
				return !map.getIsEmpty(symbol);
			});
		}
	}

	return Connection;
})();

