var Profile = require('./../../../lib/market/Profile');

describe('When a Profile is constructed (for a stock, with unit code: "A")', function() {
	'use strict';

	var profile;

	beforeEach(function() {
		profile = new Profile('TSLA', 'Tesla Motors Inc', 'NASDAQ', 'A', 1);
	});

	describe('When formatting prices', function() {
		it('formats 0 as "0.00"', function() {
			expect(profile.formatPrice(0)).toEqual('0.00');
		});

		it('formats 1 as "1.00" (when includeSign is false)', function() {
			expect(profile.formatPrice(1)).toEqual('1.00');
		});

		it('formats 1 as "+1.00" (when includeSign is true)', function() {
			expect(profile.formatPrice(1, true)).toEqual('+1.00');
		});
	});

	describe('When formatting price changes', function() {
		it('formats 0 as "unch"', function() {
			expect(profile.formatPriceChange(0)).toEqual('unch');
		});

		it('formats 1 as "1.00" (when includeSign is false)', function() {
			expect(profile.formatPriceChange(1)).toEqual('1.00');
		});

		it('formats 1 as "+1.00" (when includeSign is true)', function() {
			expect(profile.formatPriceChange(1, true)).toEqual('+1.00');
		});
	});

	describe('When formatting percents', function() {
		it('formats 0 as "0.00%"', function() {
			expect(profile.formatPercent(0)).toEqual('0.00%');
		});

		it('formats 0.123 as "12.30%" (when includeSign is false)', function() {
			expect(profile.formatPercent(0.123)).toEqual('12.30%');
		});

		it('formats 0.123 as "12.30%" (when includeSign is true)', function() {
			expect(profile.formatPercent(0.123, true)).toEqual('+12.30%');
		});
	});

	describe('When formatting percent changes', function() {
		it('formats 0 as "unch"', function() {
			expect(profile.formatPercentChange(0)).toEqual('unch');
		});

		it('formats 0.123 as "12.30%" (when includeSign is false)', function() {
			expect(profile.formatPercentChange(0.123)).toEqual('12.30%');
		});

		it('formats 0.123 as "12.30%" (when includeSign is true)', function() {
			expect(profile.formatPercentChange(0.123, true)).toEqual('+12.30%');
		});
	});

	describe('When formatting a timestamp (representing June 28, 2017 at 4:54 PM, Chicago Time)', function() {
		var timestamp;

		beforeEach(function() {
			timestamp = 1498686889526;
		});

		it('formats the time as "17:54 ET" (if no timezone is specified)', function() {
			expect(profile.formatTime(timestamp)).toEqual('17:54 ET');
		});

		it('formats the time as "16:54 CT" (if the "America/Chicago" is timezone)', function() {
			expect(profile.formatTime(timestamp, 'America/Chicago')).toEqual('16:54 CT');
		});

		describe('and the default timezone property is set to "America/Chicago"', function() {
			beforeEach(function() {
				profile.timezoneName = 'America/Chicago';
			});

			it('formats the time as "16:54 CT" (if no timezone is specified)', function() {
				expect(profile.formatTime(timestamp)).toEqual('16:54 CT');
			});
		});
	});
});

describe('When a Profile is constructed (for a future, with unit code: "2")', function() {
	'use strict';

	var profile;

	beforeEach(function() {
		profile = new Profile('ZCZ7', 'Corn', 'CBOT', '2', 1);
	});

	describe('When formatting prices', function() {
		it('formats 0 as "0-00"', function() {
			expect(profile.formatPrice(0)).toEqual('0-0');
		});
	});

	describe('When formatting price changes', function() {
		it('formats 0 as "unch"', function() {
			expect(profile.formatPriceChange(0)).toEqual('unch');
		});

		it('formats 1 as "1-0" (when includeSign is false)', function() {
			expect(profile.formatPriceChange(1)).toEqual('1-0');
		});

		it('formats 1 as "+1-0" (when includeSign is true)', function() {
			expect(profile.formatPriceChange(1, true)).toEqual('+1-0');
		});
	});

	describe('When formatting a timestamp (representing June 28, 2017 at 4:54 PM, Chicago Time)', function() {
		var timestamp;

		beforeEach(function() {
			timestamp = 1498686889526;
		});

		it('formats the time as "16:54 CT" (if no timezone is specified)', function() {
			expect(profile.formatTime(timestamp)).toEqual('16:54 CT');
		});

		it('formats the time as "17:54 ET" (if the "America/New_York" is timezone)', function() {
			expect(profile.formatTime(timestamp, 'America/New_York')).toEqual('17:54 ET');
		});

		describe('and the default timezone property is set to "America/New_York"', function() {
			beforeEach(function() {
				profile.timezoneName = 'America/New_York';
			});

			it('formats the time as "17:54 ET" (if no timezone is specified)', function() {
				expect(profile.formatTime(timestamp)).toEqual('17:54 ET');
			});
		});
	});
});