const Decimal = require('@barchart/common-js/lang/Decimal'),
	Currency = require('@barchart/common-js/lang/Currency'),
	TransactionType = require('./../../../../../../data/TransactionType');

const AverageCost = require('./../../../../../../data/calculators/position/gains/AverageCost');

describe('When the Average Cost calculator is constructed', () => {
	'use strict';

	function getBuyTransaction(shares, price, sequence, fee) {
		const f = new Decimal(fee || 0);

		const s = new Decimal(shares);
		const p = new Decimal(price);
		const a = s.multiply(p).add(f).opposite();

		return { type: TransactionType.BUY, quantity: s, amount: a, sequence: sequence, fee: f };
	}

	function getBuyShortTransaction(shares, price, sequence, fee) {
		const transaction = getBuyTransaction(shares, price, sequence, fee);

		transaction.type = TransactionType.BUY_SHORT;

		return transaction;
	}

	function getSellTransaction(shares, price, sequence, fee) {
		const f = new Decimal(fee || 0);

		const s = new Decimal(shares).opposite();
		const p = new Decimal(price);
		const a = s.multiply(p).add(f).opposite();

		return { type: TransactionType.SELL, quantity: s, amount: a, sequence: sequence, fee: f };
	}

	function getSellShortTransaction(shares, price, sequence, fee) {
		const transaction = getSellTransaction(shares, price, sequence, fee);

		transaction.type = TransactionType.SELL_SHORT;

		return transaction;
	}

	function calculateSnapshot(scenario, depth) {
		const currency = new Currency('XYZ', 'Test Currency', 2);
		const strategy = new AverageCost();
		const sliced = scenario.slice(0, depth);

		return sliced.reduce((snapshot, t) => strategy.calculate(t, currency), { });
	}

	describe('Using scenario one', () => {
		let scenario;

		beforeEach(function () {
			scenario = [
				getBuyTransaction(100, 10, 1, 0),
				getSellTransaction(50, 9, 2, 0),
				getBuyTransaction(50, 8, 3, 0),
				getSellTransaction(100, 10, 4, 0),
			];
		});

		describe('after processing 1 transaction', function () {
			let snapshot;

			beforeEach(function () {
				snapshot = calculateSnapshot(scenario, 1);
			});

			it('the position should be 100', function () {
				expect(snapshot.open.getIsEqual(100)).toBe(true);
			});

			it('the gain should be 0', function () {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -1000', function () {
				expect(snapshot.basis.getIsEqual(-1000)).toBe(true);
			});
		});

		describe('after processing 2 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 2);
			});

			it('the position should be 50', () => {
				expect(snapshot.open.getIsEqual(50)).toBe(true);
			});

			it('the gain should be -50', () => {
				expect(snapshot.gain.getIsEqual(-50)).toBe(true);
			});

			it('the basis should be -500', () => {
				expect(snapshot.basis.getIsEqual(-500)).toBe(true);
			});
		});

		describe('after processing 3 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 3);
			});

			it('the position should be 100', () => {
				expect(snapshot.open.getIsEqual(100)).toBe(true);
			});

			it('the gain should be -50', () => {
				expect(snapshot.gain.getIsEqual(-50)).toBe(true);
			});

			it('the basis should be -900', () => {
				expect(snapshot.basis.getIsEqual(-900)).toBe(true);
			});
		});

		describe('after processing 4 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 4);
			});

			it('the position should be 0', () => {
				expect(snapshot.open.getIsEqual(0)).toBe(true);
			});

			it('the gain should be 50', () => {
				expect(snapshot.gain.getIsEqual(50)).toBe(true);
			});

			it('the basis should be 0', () => {
				expect(snapshot.basis.getIsEqual(0)).toBe(true);
			});
		});
	});

	describe('Using scenario one (with fees)', () => {
		let scenario;

		beforeEach(() => {
			scenario = [
				getBuyTransaction(100, 10, 1, 9.95),
				getSellTransaction(50, 9, 2, 9.95),
				getBuyTransaction(50, 8, 3, 9.95),
				getSellTransaction(100, 10, 4, 9.95),
			];
		});

		describe('after processing 1 transaction', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 1);
			});

			it('the position should be 100', () => {
				expect(snapshot.open.getIsEqual(100)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -1009.95', () => {
				expect(snapshot.basis.getIsEqual(-1009.95)).toBe(true);
			});
		});

		describe('after processing 2 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 2);
			});

			it('the position should be 50', () => {
				expect(snapshot.open.getIsEqual(50)).toBe(true);
			});

			it('the gain should be -64.93', () => {
				expect(snapshot.gain.getIsEqual(-64.93)).toBe(true);
			});

			it('the basis should be -504.97', () => {
				expect(snapshot.basis.getIsEqual(-504.97)).toBe(true);
			});
		});

		describe('after processing 3 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 3);
			});

			it('the position should be 100', () => {
				expect(snapshot.open.getIsEqual(100)).toBe(true);
			});

			it('the gain should be -64.93', () => {
				expect(snapshot.gain.getIsEqual(-64.93)).toBe(true);
			});

			it('the basis should be -914.92', () => {
				expect(snapshot.basis.getIsEqual(-914.92)).toBe(true);
			});
		});

		describe('after processing 4 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 4);
			});

			it('the position should be 0', () => {
				expect(snapshot.open.getIsEqual(0)).toBe(true);
			});

			it('the gain should be 10.2', () => {
				expect(snapshot.gain.getIsEqual(10.2)).toBe(true);
			});

			it('the basis should be 0', () => {
				expect(snapshot.basis.getIsEqual(0)).toBe(true);
			});
		});
	});

	describe('Using scenario two', () => {
		let scenario;

		beforeEach(() => {
			scenario = [
				getSellShortTransaction(100, 10, 1, 0),
				getBuyShortTransaction(50, 9, 2, 0),
				getSellShortTransaction(50, 8, 3, 0),
				getBuyShortTransaction(100, 10, 4, 0),
			];
		});

		describe('after processing 1 transaction', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 1);
			});

			it('the position should be -100', () => {
				expect(snapshot.open.getIsEqual(-100)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be 1000', () => {
				expect(snapshot.basis.getIsEqual(1000)).toBe(true);
			});
		});

		describe('after processing 2 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 2);
			});

			it('the position should be -50', () => {
				expect(snapshot.open.getIsEqual(-50)).toBe(true);
			});

			it('the gain should be 50', () => {
				expect(snapshot.gain.getIsEqual(50)).toBe(true);
			});

			it('the basis should be 500', () => {
				expect(snapshot.basis.getIsEqual(500)).toBe(true);
			});
		});

		describe('after processing 3 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 3);
			});

			it('the position should be -100', () => {
				expect(snapshot.open.getIsEqual(-100)).toBe(true);
			});

			it('the gain should be 50', () => {
				expect(snapshot.gain.getIsEqual(50)).toBe(true);
			});

			it('the basis should be 900', () => {
				expect(snapshot.basis.getIsEqual(900)).toBe(true);
			});
		});

		describe('after processing 4 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 4);
			});

			it('the position should be 0', () => {
				expect(snapshot.open.getIsEqual(0)).toBe(true);
			});

			it('the gain should be -50', () => {
				expect(snapshot.gain.getIsEqual(-50)).toBe(true);
			});

			it('the basis should be 0', () => {
				expect(snapshot.basis.getIsEqual(0)).toBe(true);
			});
		});
	});

	describe('Using scenario two (with fees)', () => {
		let scenario;

		beforeEach(() => {
			scenario = [
				getSellShortTransaction(100, 10, 1, 9.95),
				getBuyShortTransaction(50, 9, 2, 9.95),
				getSellShortTransaction(50, 8, 3, 9.95),
				getBuyShortTransaction(100, 10, 4, 9.95),
			];
		});

		describe('after processing 1 transaction', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 1);
			});

			it('the position should be -100', () => {
				expect(snapshot.open.getIsEqual(-100)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be 990.05', () => {
				expect(snapshot.basis.getIsEqual(990.05)).toBe(true);
			});
		});

		describe('after processing 2 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 2);
			});

			it('the position should be -50', () => {
				expect(snapshot.open.getIsEqual(-50)).toBe(true);
			});

			it('the gain should be 35.07', () => {
				expect(snapshot.gain.getIsEqual(35.07)).toBe(true);
			});

			it('the basis should be 495.03', () => {
				expect(snapshot.basis.getIsEqual(495.03)).toBe(true);
			});
		});

		describe('after processing 3 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 3);
			});

			it('the position should be -100', () => {
				expect(snapshot.open.getIsEqual(-100)).toBe(true);
			});

			it('the gain should be 35.07', () => {
				expect(snapshot.gain.getIsEqual(35.07)).toBe(true);
			});

			it('the basis should be 885.08', () => {
				expect(snapshot.basis.getIsEqual(885.08)).toBe(true);
			});
		});

		describe('after processing 4 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 4);
			});

			it('the position should be 0', () => {
				expect(snapshot.open.getIsEqual(0)).toBe(true);
			});

			it('the gain should be -89.8', () => {
				expect(snapshot.gain.getIsEqual(-89.8)).toBe(true);
			});

			it('the basis should be 0', () => {
				expect(snapshot.basis.getIsEqual(0)).toBe(true);
			});
		});
	});

	describe('Using scenario three (with fees)', () => {
		let scenario;

		beforeEach(() => {
			scenario = [
				getBuyTransaction(80, 33.75, 1, 29.95),
				getBuyTransaction(120, 39.77, 2, 29.95),
				getBuyTransaction(150, 43.97, 3, 29.95),
				getSellTransaction(150, 45.4, 4, 29.95),
				getBuyTransaction(100, 43.63, 5, 28.95),
				getSellTransaction(100, 49.16, 6, 9.95),
				getSellTransaction(100, 52.14, 7, 9.95),
				getBuyTransaction(100, 50.92, 8, 9.95),
				getSellTransaction(100, 55.29, 9, 9.95),
			];
		});

		describe('after processing 1 transaction', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 1);
			});

			it('the position should be 80', () => {
				expect(snapshot.open.getIsEqual(80)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -2729.95', () => {
				expect(snapshot.basis.getIsEqual(-2729.95)).toBe(true);
			});
		});

		describe('after processing 2 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 2);
			});

			it('the position should be 200', () => {
				expect(snapshot.open.getIsEqual(200)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -7532.3', () => {
				expect(snapshot.basis.getIsEqual(-7532.3)).toBe(true);
			});
		});

		describe('after processing 3 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 3);
			});

			it('the position should be 350', () => {
				expect(snapshot.open.getIsEqual(350)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -14157.75', () => {
				expect(snapshot.basis.getIsEqual(-14157.75)).toBe(true);
			});
		});

		describe('after processing 4 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 4);
			});

			it('the position should be 200', () => {
				expect(snapshot.open.getIsEqual(200)).toBe(true);
			});

			it('the gain should be 712.44', () => {
				expect(snapshot.gain.getIsEqual(712.44)).toBe(true);
			});

			it('the basis should be -8090.14', () => {
				expect(snapshot.basis.getIsEqual(-8090.14)).toBe(true);
			});
		});

		describe('after processing 5 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 5);
			});

			it('the position should be 300', () => {
				expect(snapshot.open.getIsEqual(300)).toBe(true);
			});

			it('the gain should be 712.44', () => {
				expect(snapshot.gain.getIsEqual(712.44)).toBe(true);
			});

			it('the basis should be -12482.09', () => {
				expect(snapshot.basis.getIsEqual(-12482.09)).toBe(true);
			});
		});

		describe('after processing 6 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 6);
			});

			it('the position should be 200', () => {
				expect(snapshot.open.getIsEqual(200)).toBe(true);
			});

			it('the gain should be 1457.79', () => {
				expect(snapshot.gain.getIsEqual(1457.79)).toBe(true);
			});

			it('the basis should be -8321.39', () => {
				expect(snapshot.basis.getIsEqual(-8321.39)).toBe(true);
			});
		});

		describe('after processing 7 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 7);
			});

			it('the position should be 100', () => {
				expect(snapshot.open.getIsEqual(100)).toBe(true);
			});

			it('the gain should be 2501.14', () => {
				expect(snapshot.gain.getIsEqual(2501.14)).toBe(true);
			});

			it('the basis should be -4160.69', () => {
				expect(snapshot.basis.getIsEqual(-4160.69)).toBe(true);
			});
		});

		describe('after processing 8 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 8);
			});

			it('the position should be 200', () => {
				expect(snapshot.open.getIsEqual(200)).toBe(true);
			});

			it('the gain should be 2501.14', () => {
				expect(snapshot.gain.getIsEqual(2501.14)).toBe(true);
			});

			it('the basis should be -9262.64', () => {
				expect(snapshot.basis.getIsEqual(-9262.64)).toBe(true);
			});
		});

		describe('after processing 9 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 9);
			});

			it('the position should be 100', () => {
				expect(snapshot.open.getIsEqual(100)).toBe(true);
			});

			it('the gain should be 3388.86', () => {
				expect(snapshot.gain.getIsEqual(3388.86)).toBe(true);
			});

			it('the basis should be -4631.32', () => {
				expect(snapshot.basis.getIsEqual(-4631.32)).toBe(true);
			});
		});
	});

	describe('Using scenario four', () => {
		let scenario;

		beforeEach(() => {
			scenario = [
				getBuyTransaction(1200, 27.9167, 1, 100),
				getBuyTransaction(900, 28.91, 2, 100),
				getBuyTransaction(400, 34, 3, 100),
				getSellTransaction(500, 49.05, 4, 125),
				getBuyTransaction(1700, 58.181, 5, 0),
				getBuyTransaction(175, 61.7494, 6, 0),
				getBuyTransaction(325, 61.8, 7, 0)
			];
		});

		describe('after processing 1 transaction', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 1);
			});

			it('the position should be 1200', () => {
				expect(snapshot.open.getIsEqual(1200)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -33600.04', () => {
				expect(snapshot.basis.getIsEqual(-33600.04)).toBe(true);
			});
		});

		describe('after processing 2 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 2);
			});

			it('the position should be 2100', () => {
				expect(snapshot.open.getIsEqual(2100)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -59719.04', () => {
				expect(snapshot.basis.getIsEqual(-59719.04)).toBe(true);
			});
		});

		describe('after processing 3 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 3);
			});

			it('the position should be 2500', () => {
				expect(snapshot.open.getIsEqual(2500)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -73419.04', () => {
				expect(snapshot.basis.getIsEqual(-73419.04)).toBe(true);
			});
		});

		describe('after processing 4 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 4);
			});

			it('the position should be 2000', () => {
				expect(snapshot.open.getIsEqual(2000)).toBe(true);
			});

			it('the gain should be 9716.19', () => {
				expect(snapshot.gain.getIsEqual(9716.19)).toBe(true);
			});

			it('the basis should be -58735.23', () => {
				expect(snapshot.basis.getIsEqual(-58735.23)).toBe(true);
			});
		});

		describe('after processing 5 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 5);
			});

			it('the position should be 3700', () => {
				expect(snapshot.open.getIsEqual(3700)).toBe(true);
			});

			it('the gain should be 9716.19', () => {
				expect(snapshot.gain.getIsEqual(9716.19)).toBe(true);
			});

			it('the basis should be -157642.93', () => {
				expect(snapshot.basis.getIsEqual(-157642.93)).toBe(true);
			});
		});

		describe('after processing 6 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 6);
			});

			it('the position should be 3875', () => {
				expect(snapshot.open.getIsEqual(3875)).toBe(true);
			});

			it('the gain should be 9716.19', () => {
				expect(snapshot.gain.getIsEqual(9716.19)).toBe(true);
			});

			it('the basis should be -168449.07', () => {
				expect(snapshot.basis.getIsEqual(-168449.07)).toBe(true);
			});
		});

		describe('after processing 7 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 7);
			});

			it('the position should be 4200', () => {
				expect(snapshot.open.getIsEqual(4200)).toBe(true);
			});

			it('the gain should be 9716.19', () => {
				expect(snapshot.gain.getIsEqual(9716.19)).toBe(true);
			});

			it('the basis should be -188534.07', () => {
				expect(snapshot.basis.getIsEqual(-188534.07)).toBe(true);
			});
		});
	});

	describe('Using scenario five', () => {
		let scenario;

		beforeEach(() => {
			scenario = [
				getBuyTransaction(200, 9.52, 1, 29),
				getBuyTransaction(200, 11.25, 2, 29),
				getSellTransaction(100, 11.03, 3, 29),
				getBuyTransaction(100, 9.78, 4, 9.99),
				getSellTransaction(400, 10.45, 5, 9.99),
			];
		});

		describe('after processing 1 transaction', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 1);
			});

			it('the position should be 200', () => {
				expect(snapshot.open.getIsEqual(200)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -1933.00', () => {
				expect(snapshot.basis.getIsEqual(-1933.00)).toBe(true);
			});
		});

		describe('after processing 2 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 2);
			});

			it('the position should be 400', () => {
				expect(snapshot.open.getIsEqual(400)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -4212.00', () => {
				expect(snapshot.basis.getIsEqual(-4212.00)).toBe(true);
			});
		});


		describe('after processing 3 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 3);
			});

			it('the position should be 300', () => {
				expect(snapshot.open.getIsEqual(300)).toBe(true);
			});

			it('the gain should be 21.00', () => {
				expect(snapshot.gain.getIsEqual(21.00)).toBe(true);
			});

			it('the basis should be -3159.00', () => {
				expect(snapshot.basis.getIsEqual(-3159.00)).toBe(true);
			});
		});

		describe('after processing 4 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 4);
			});

			it('the position should be 400', () => {
				expect(snapshot.open.getIsEqual(400)).toBe(true);
			});

			it('the gain should be 21.00', () => {
				expect(snapshot.gain.getIsEqual(21.00)).toBe(true);
			});

			it('the basis should be -4146.99', () => {
				expect(snapshot.basis.getIsEqual(-4146.99)).toBe(true);
			});
		});

		describe('after processing 5 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 5);
			});

			it('the position should be 0', () => {
				expect(snapshot.open.getIsEqual(0)).toBe(true);
			});

			it('the gain should be 44.02', () => {
				expect(snapshot.gain.getIsEqual(44.02)).toBe(true);
			});

			it('the basis should be 0', () => {
				expect(snapshot.basis.getIsEqual(0)).toBe(true);
			});
		});
	});

	describe('Using scenario six', () => {
		let scenario;

		beforeEach(() => {
			scenario = [
				getBuyTransaction(2100, 12.8, 1, 63),
				getBuyTransaction(400, 12.96, 2, 25.95),
				getBuyTransaction(2100, 13.07, 3, 86.1),
				getBuyTransaction(2000, 13.15, 4, 0),
				getBuyTransaction(1500, 13.3, 5, 31.5),
				getBuyTransaction(800, 13.23, 6, 94.47),
				getBuyTransaction(1600, 13.45, 7, 37.8),
				getBuyTransaction(200, 13.46, 8, 0),
				getBuyTransaction(1600, 13.59, 9, 199.47),
				getBuyTransaction(3400, 13.6, 10, 0),
				getBuyTransaction(600, 14.11, 11, 20.76),
				getBuyTransaction(1100, 13.52, 12, 105.6),
				getBuyTransaction(3300, 13.5, 13, 0),
				getBuyTransaction(600, 13.62, 14, 20.76),
				getBuyTransaction(1500, 13.55, 15, 36),
				getBuyTransaction(1500, 13.6, 16, 36),
				getBuyTransaction(1500, 13.53, 17, 36),
				getBuyTransaction(1500, 13.55, 18, 36),
				getBuyTransaction(1000, 13.85, 19, 20.76),
				getBuyTransaction(2500, 12.48, 20, 60),
				getBuyTransaction(1000, 12.36, 21, 60),
				getBuyTransaction(1500, 12.36, 22, 0),
				getBuyTransaction(1500, 10.35, 23, 36),
				getBuyTransaction(2400, 10.32, 24, 132),
				getBuyTransaction(1600, 10.33, 25, 0),
				getBuyTransaction(1500, 10.4, 26, 0),
				getBuyTransaction(1500, 11.53, 27, 36),
				getBuyTransaction(1500, 11.02, 28, 36),
				getBuyTransaction(5000, 11.02, 29, 120),
				getBuyTransaction(4200, 11.05, 30, 100.8),
				getBuyTransaction(1800, 11.02, 31, 43.2),
				getBuyTransaction(4000, 10.39, 32, 216),
				getBuyTransaction(2200, 10.39, 33, 0),
				getBuyTransaction(2800, 10.4, 34, 0),
				getBuyTransaction(1100, 9.93, 35, 120),
				getBuyTransaction(3900, 9.94, 36, 0),
				getBuyTransaction(1700, 9.9, 37, 0),
				getBuyTransaction(5000, 9.09, 38, 120),
				getBuyTransaction(1000, 8.4, 39, 23.16),
				getBuyTransaction(2500, 8.98, 40, 0),
				getBuyTransaction(2500, 8.98, 41, 60),
				getBuyTransaction(2500, 8.99, 42, 60),
				getBuyTransaction(1000, 8.98, 43, 96),
				getBuyTransaction(1800, 8.98, 44, 0),
				getBuyTransaction(1200, 8.99, 45, 0),
				getBuyTransaction(3900, 9.4, 46, 120),
				getBuyTransaction(1100, 9.41, 47, 0),
				getBuyTransaction(5000, 9.55, 48, 120),
				getBuyTransaction(2500, 9.35, 49, 48),
				getBuyTransaction(3000, 9.09, 50, 72),
				getBuyTransaction(2000, 9.79, 51, 48),
				getSellTransaction(102000, 8.4938, 52, 3295.96),
				getSellTransaction(3000, 8.92, 53, 0)
			];
		});

		describe('after processing 1 transaction', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 1);
			});

			it('the position should be 2100', () => {
				expect(snapshot.open.getIsEqual(2100)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -26943.00', () => {
				expect(snapshot.basis.getIsEqual(-26943.00)).toBe(true);
			});
		});

		describe('after processing 2 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 2);
			});

			it('the position should be 2500', () => {
				expect(snapshot.open.getIsEqual(2500)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -32152.95', () => {
				expect(snapshot.basis.getIsEqual(-32152.95)).toBe(true);
			});
		});

		describe('after processing 3 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 3);
			});

			it('the position should be 4600', () => {
				expect(snapshot.open.getIsEqual(4600)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -59686.05', () => {
				expect(snapshot.basis.getIsEqual(-59686.05)).toBe(true);
			});
		});

		describe('after processing 4 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 4);
			});

			it('the position should be 6600', () => {
				expect(snapshot.open.getIsEqual(6600)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -85986.05', () => {
				expect(snapshot.basis.getIsEqual(-85986.05)).toBe(true);
			});
		});

		describe('after processing 51 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 51);
			});

			it('the position should be 105000', () => {
				expect(snapshot.open.getIsEqual(105000)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -1154265.33', () => {
				expect(snapshot.basis.getIsEqual(-1154265.33)).toBe(true);
			});
		});

		describe('after processing 52 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 52);
			});

			it('the position should be 3000', () => {
				expect(snapshot.open.getIsEqual(3000)).toBe(true);
			});

			it('the gain should be -258214.69', () => {
				expect(snapshot.gain.getIsEqual(-258214.69)).toBe(true);
			});

			it('the basis should be -32979.00', () => {
				expect(snapshot.basis.getIsEqual(-32979.00)).toBe(true);
			});
		});

		describe('after processing 53 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 53);
			});

			it('the position should be 0', () => {
				expect(snapshot.open.getIsEqual(0)).toBe(true);
			});

			it('the gain should be -264433.69', () => {
				expect(snapshot.gain.getIsEqual(-264433.69)).toBe(true);
			});

			it('the basis should be 0', () => {
				expect(snapshot.basis.getIsEqual(0)).toBe(true);
			});
		});
	});

	describe('Using scenario seven', () => {
		let scenario;

		beforeEach(() => {
			scenario = [
				getBuyTransaction(1200, 13.07, 1, 20.76),
				getBuyTransaction(900, 13.15, 2, 36),
				getSellTransaction(400, 13.3, 3, 36),
				getSellTransaction(500, 13.23, 4, 36),
				getBuyTransaction(1700, 13.45, 5, 36),
				getBuyTransaction(175, 13.46, 6, 20.76),
				getSellTransaction(325, 13.59, 7, 60),
				getBuyTransaction(150, 13.6, 8, 60),
				getSellTransaction(200, 14.11, 9, 0),
				getSellTransaction(300, 13.52, 10, 36),
				getBuyTransaction(400, 13.5, 11, 132),
				getBuyTransaction(100, 13.62, 12, 36),
				getSellTransaction(2900, 13.55, 13, 36),
			];
		});

		describe('after processing 1 transaction', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 1);
			});

			it('the position should be 1200', () => {
				expect(snapshot.open.getIsEqual(1200)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -15704.76', () => {
				expect(snapshot.basis.getIsEqual(-15704.76)).toBe(true);
			});
		});

		describe('after processing 2 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 2);
			});

			it('the position should be 2100', () => {
				expect(snapshot.open.getIsEqual(2100)).toBe(true);
			});

			it('the gain should be 0', () => {
				expect(snapshot.gain.getIsEqual(0)).toBe(true);
			});

			it('the basis should be -27575.76', () => {
				expect(snapshot.basis.getIsEqual(-27575.76)).toBe(true);
			});
		});

		describe('after processing 3 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 3);
			});

			it('the position should be 1700', () => {
				expect(snapshot.open.getIsEqual(1700)).toBe(true);
			});

			it('the gain should be 31.47', () => {
				expect(snapshot.gain.getIsEqual(31.47)).toBe(true);
			});

			it('the basis should be -22323.23', () => {
				expect(snapshot.basis.getIsEqual(-22323.23)).toBe(true);
			});
		});

		describe('after processing 4 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 4);
			});

			it('the position should be 1200', () => {
				expect(snapshot.open.getIsEqual(1200)).toBe(true);
			});

			it('the gain should be 44.81', () => {
				expect(snapshot.gain.getIsEqual(44.81)).toBe(true);
			});

			it('the basis should be -15757.57', () => {
				expect(snapshot.basis.getIsEqual(-15757.57)).toBe(true);
			});
		});

		describe('after processing 5 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 5);
			});

			it('the position should be 2900', () => {
				expect(snapshot.open.getIsEqual(2900)).toBe(true);
			});

			it('the gain should be 44.81', () => {
				expect(snapshot.gain.getIsEqual(44.81)).toBe(true);
			});

			it('the basis should be -38658.57', () => {
				expect(snapshot.basis.getIsEqual(-38658.57)).toBe(true);
			});
		});

		describe('after processing 6 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 6);
			});

			it('the position should be 3075', () => {
				expect(snapshot.open.getIsEqual(3075)).toBe(true);
			});

			it('the gain should be 44.81', () => {
				expect(snapshot.gain.getIsEqual(44.81)).toBe(true);
			});

			it('the basis should be -41034.83', () => {
				expect(snapshot.basis.getIsEqual(-41034.83)).toBe(true);
			});
		});

		describe('after processing 7 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 7);
			});

			it('the position should be 2750', () => {
				expect(snapshot.open.getIsEqual(2750)).toBe(true);
			});

			it('the gain should be 64.54', () => {
				expect(snapshot.gain.getIsEqual(64.54)).toBe(true);
			});

			it('the basis should be -36697.82', () => {
				expect(snapshot.basis.getIsEqual(-36697.82)).toBe(true);
			});
		});

		describe('after processing 8 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 8);
			});

			it('the position should be 2900', () => {
				expect(snapshot.open.getIsEqual(2900)).toBe(true);
			});

			it('the gain should be 64.54', () => {
				expect(snapshot.gain.getIsEqual(64.54)).toBe(true);
			});

			it('the basis should be -38797.82', () => {
				expect(snapshot.basis.getIsEqual(-38797.82)).toBe(true);
			});
		});

		describe('after processing 9 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 9);
			});

			it('the position should be 2700', () => {
				expect(snapshot.open.getIsEqual(2700)).toBe(true);
			});

			it('the gain should be 210.82', () => {
				expect(snapshot.gain.getIsEqual(210.82)).toBe(true);
			});

			it('the basis should be -36122.10', () => {
				expect(snapshot.basis.getIsEqual(-36122.10)).toBe(true);
			});
		});

		describe('after processing 10 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 10);
			});

			it('the position should be 2400', () => {
				expect(snapshot.open.getIsEqual(2400)).toBe(true);
			});

			it('the gain should be 217.25', () => {
				expect(snapshot.gain.getIsEqual(217.25)).toBe(true);
			});

			it('the basis should be -32108.54', () => {
				expect(snapshot.basis.getIsEqual(-32108.54)).toBe(true);
			});
		});

		describe('after processing 11 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 11);
			});

			it('the position should be 2800', () => {
				expect(snapshot.open.getIsEqual(2800)).toBe(true);
			});

			it('the gain should be 217.25', () => {
				expect(snapshot.gain.getIsEqual(217.25)).toBe(true);
			});

			it('the basis should be -37640.54', () => {
				expect(snapshot.basis.getIsEqual(-37640.54)).toBe(true);
			});
		});

		describe('after processing 12 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 12);
			});

			it('the position should be 2900', () => {
				expect(snapshot.open.getIsEqual(2900)).toBe(true);
			});

			it('the gain should be 217.25', () => {
				expect(snapshot.gain.getIsEqual(217.25)).toBe(true);
			});

			it('the basis should be -39038.54', () => {
				expect(snapshot.basis.getIsEqual(-39038.54)).toBe(true);
			});
		});

		describe('after processing 13 transactions', () => {
			let calculator;
			let snapshot;

			beforeEach(() => {
				snapshot = calculateSnapshot(scenario, 13);
			});

			it('the position should be 0', () => {
				expect(snapshot.open.getIsEqual(0)).toBe(true);
			});

			it('the gain should be 437.73', () => {
				expect(snapshot.gain.getIsEqual(437.73)).toBe(true);
			});

			it('the basis should be 0', () => {
				expect(snapshot.basis.getIsEqual(0)).toBe(true);
			});
		});
	});
});