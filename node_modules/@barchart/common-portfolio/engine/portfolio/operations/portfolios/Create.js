const uuid = require('uuid');

const assert = require('@barchart/common-js/lang/assert'),
	Currency = require('@barchart/common-js/lang/Currency'),
	Day = require('@barchart/common-js/lang/Day'),
	is = require('@barchart/common-js/lang/is'),
	Timezones = require('@barchart/common-js/lang/Timezones');

const PortfolioDataOperation = require('./../../PortfolioDataOperation'),
	ValuationType = require('./../../../../data/ValuationType');

const Save = require('./Save');

module.exports = (() => {
	'use strict';

	/**
	 * Creates a new {@link Portfolio}.
	 *
	 * @public
	 * @extends {PortfolioDataOperation}
	 * @param {Object} data
	 * @param {String} data.user - The identifier of the portfolio's owner.
	 * @param {String=} data.portfolio - The identifier of the portfolio (if omitted, identifier is auto-generated).
	 * @param {String} data.name - The name of the portfolio.
	 * @param {Timezones=} data.timezone - The timezone to use for interpreting dates (if omitted, {@link Timeszones.AMERICA_NEW_YORK} is assumed).
	 * @param {Day=} data.dates.create - The day the portfolio was created (if omitted, today).
	 * @param {Day=} data.dates.cash - The day to begin tracknig cash (if omitted, cash is not tracked).
	 * @param {Currency=} data.defaults.currency - The default currency for the portfolio (if omitted, {@link Currency.USD is} is assumed).
	 * @param {Boolean=} data.defaults.reinvest - Indicates if dividends, distributions, or income are re-invested into the position.
	 * @param {ValuationType=} data.defaults.valuation - The valuation strategy used for the position (if omitted {@link ValuationType.AVERAGE_COST} is assumed).
	 * @param {Number=} sequence - The sequence number for the position.
	 */
	class Create extends PortfolioDataOperation {
		constructor(data) {
			super();

			assert.argumentIsRequired(data.user, 'data.user', String);
			assert.argumentIsOptional(data.portfolio, 'data.portfolio', String);
			assert.argumentIsRequired(data.name, 'data.name', String);
			assert.argumentIsOptional(data.timezone, 'data.timezone', Timezones, 'Timezone');

			if (is.object(data.dates)) {
				assert.argumentIsOptional(data.dates.create, 'data.dates.create', Day, 'Day');
				assert.argumentIsOptional(data.dates.cash, 'data.dates.cash', Day, 'Day');
			}

			if (is.object(data.defaults)) {
				assert.argumentIsOptional(data.defaults.currency, 'data.defaults.currency', Currency, 'Currency');
				assert.argumentIsOptional(data.defaults.reinvest, 'data.defaults.reinvest', Boolean);
				assert.argumentIsOptional(data.defaults.valuation, 'data.defaults.valuation', ValuationType, 'ValuationType');
			}

			if (is.object(data.legacy)) {
				assert.argumentIsOptional(data.legacy.system, 'data.legacy.system', String);
				assert.argumentIsOptional(data.legacy.user, 'data.legacy.user', String);
				assert.argumentIsOptional(data.legacy.portfolio, 'data.legacy.portfolio', String);
			}

			this._data = data;
		}

		_process(dataProvider) {
			const data = this._data;

			const portfolio = { };

			portfolio.user = data.user;
			portfolio.portfolio = data.portfolio || uuid.v4();
			portfolio.name = data.name;

			portfolio.timezone = data.timezone || Timezones.AMERICA_NEW_YORK;

			portfolio.dates = { };

			const date = new Date();

			let create  = new Day(date.getFullYear(), date.getMonth() + 1, date.getDate());
			let cash = null;

			if (is.object(data.dates)) {
				create = data.dates.create || create;
				cash = data.dates.cash || null;
			}

			portfolio.dates.create = create;

			if (cash) {
				portfolio.dates.cash = cash;
			}

			portfolio.defaults = { };

			let currency = Currency.USD;
			let reinvest = false;
			let valuation = ValuationType.AVERAGE_COST;

			if (is.object(data.defaults)) {
				currency = data.defaults.currency || currency;
				reinvest = data.defaults.reinvest || reinvest;
				valuation = data.defaults.valuation || valuation;
			}

			portfolio.defaults.currency = currency;
			portfolio.defaults.reinvest = reinvest;
			portfolio.defaults.valuation = valuation;

			if (is.object(data.legacy)) {
				portfolio.legacy = data.legacy;
			}

			portfolio.system = { };

			portfolio.system.version = 1;

			return dataProvider.addPortfolio(portfolio)
				.then(() => {
					this._spawn(new Save(portfolio.user, portfolio.portfolio));

					return portfolio;
				});
		}

		toString() {
			return '[Create]';
		}
	}

	return Create;
})();
