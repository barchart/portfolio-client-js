const array = require('@barchart/common-js/lang/array'),
	assert = require('@barchart/common-js/lang/assert');

const DataOperationStage = require('./../../../DataOperationStage'),
	PortfolioDataOperation = require('./../../PortfolioDataOperation');

const Update = require('./Save');

module.exports = (() => {
	'use strict';

	/**
	 * Causes the "snapshot" of a {@link Position} to be updated.
	 *
	 * @public
	 * @extends {PortfolioDataOperation}
	 * @param {String} user - The user identifier (of the portfolio's owner).
	 * @param {String} portfolio - The identifier of the portfolio.
	 * @param {String} position - The identifier of the position.
	 */
	class Recalculate extends PortfolioDataOperation {
		constructor(user, portfolio, position) {
			super();

			assert.argumentIsRequired(user, 'user', String);
			assert.argumentIsRequired(portfolio, 'portfolio', String);
			assert.argumentIsRequired(position, 'position', String);

			this._user = user;
			this._portfolio = portfolio;
			this._position = position;
		}

		get stage() {
			return DataOperationStage.FINALIZE;
		}

		_process(dataProvider) {
			return Promise.all([
				dataProvider.getPosition(this._user, this._portfolio, this._position),
				dataProvider.getTransactions(this._user, this._portfolio, this._position)
			]).then((data) => {
				const position = data[0];
				const transaction = array.last(data[1]);

				position.transaction = transaction.sequence;
				position.snapshot = transaction.snapshot;

				this._spawn(new Update(position.user, position.portfolio, position.position));
			});
		}

		_equals(other) {
			return other instanceof Recalculate && other._user === this._user && other._portfolio === this._portfolio && other._position === this._position;
		}

		toString() {
			return '[Recalculate]';
		}
	}

	return Recalculate;
})();
