const assert = require('@barchart/common-js/lang/assert'),
	attributes = require('@barchart/common-js/lang/attributes'),
	Decimal = require('@barchart/common-js/lang/Decimal'),
	is = require('@barchart/common-js/lang/is');

const Create = require('./Create'),
	Credit = require('./Credit'),
	Debit = require('./Debit'),
	TransactionType = require('./../../../../data/TransactionType');

module.exports = (() => {
	'use strict';

	/**
	 * Creates a {@link TransactionType.SELL} transaction.
	 *
	 * @public
	 * @extends {Create}
	 * @param {Object} data
	 * @param {String} data.user - The user identifier (of the portfolio's owner).
	 * @param {String} data.portfolio - The identifier of the portfolio.
	 * @param {String} data.position - The identifier of the position.
	 * @param {Day} data.date - The day of the transaction.
	 * @param {Timestamp} data.timestamp - The moment of the transaction.
	 * @param {Decimal} data.price - The per-unit price of the sale.
	 * @param {Decimal} data.quantity - The number of units sold.
	 * @param {Decimal} data.fee - The fee charged to complete the transaction.
	 */
	class Sell extends Create {
		constructor(data) {
			super(data);

			assert.argumentIsValid(data.price, 'data.price', Decimal.getIsNotNegative, 'cannot be negative');
			assert.argumentIsValid(data.quantity, 'data.quantity', Decimal.getIsNotNegative, 'cannot be negative');

			if (data.fee) {
				assert.argumentIsValid(data.fee, 'data.fee', Decimal.getIsNotNegative, 'cannot be negative');
			}
		}

		get type() {
			return TransactionType.SELL;
		}

		_createTransaction(position, transactions, data) {
			const signedQuantity = data.quantity.opposite();

			return {
				fee: data.fee,
				quantity: signedQuantity,
				amount: signedQuantity.multiply(data.price).add(data.fee || Decimal.ZERO).round(position.instrument.currency.precision).opposite(),
				trade: {
					price: data.price
				}
			};
		}

		_afterTransactionCreated(position, transactions, transaction) {
			const data = {};

			data.user = transaction.user;
			data.portfolio = transaction.portfolio;
			data.currency = position.instrument.currency;

			data.date = transaction.date;
			data.timestamp = transaction.timestamp;

			data.amount = transaction.amount;

			data.reference = {
				position: transaction.position,
				sequence: transaction.sequence
			};

			data.description = `Sell ${transaction.quantity.absolute().toFixed()} ${getDescriptionForInstrument(position.instrument)} @ ${transaction.trade.price.toFixed()}`;

			if (is.object(transaction.legacy)) {
				const legacy = { };

				if (transaction.legacy.system) {
					legacy.system = transaction.legacy.system;
				}

				if (transaction.legacy.user) {
					legacy.user = transaction.legacy.user;
				}

				if (transaction.legacy.portfolio) {
					legacy.portfolio = transaction.legacy.portfolio;
				}

				data.legacy = legacy;
			}

			let cashOperation;

			if (data.amount.getIsNegative()) {
				cashOperation = new Debit(data);
			} else {
				cashOperation = new Credit(data);
			}

			this._spawn(cashOperation);
		}

		toString() {
			return '[Sell]';
		}
	}

	function getDescriptionForInstrument(instrument) {
		if (attributes.has(instrument, 'symbol.display')) {
			return attributes.read(instrument, 'symbol.display');
		} else {
			return instrument.name || instrument.id;
		}
	}

	return Sell;
})();
