const assert = require('@barchart/common-js/lang/assert'),
	Day = require('@barchart/common-js/lang/Day'),
	Decimal = require('@barchart/common-js/lang/Decimal');

const Create = require('./Create'),
	TransactionType = require('./../../../../data/TransactionType');

module.exports = (() => {
	'use strict';

	/**
	 * Creates a {@link TransactionType.FEE_UNITS} transaction.
	 *
	 * @public
	 * @extends {Create}
	 * @param {Object} data
	 * @param {String} data.user - The user identifier (of the portfolio's owner).
	 * @param {String} data.portfolio - The identifier of the portfolio.
	 * @param {String} data.position - The identifier of the position.
	 * @param {Day} data.date - The day of the transaction.
	 * @param {Timestamp} data.timestamp - The moment of the transaction.
	 * @param {Decimal} data.fee - The amount of the fee.
	 * @param {Decimal} data.price - The net asset value of the fund at the time units are sold.
	 * @param {Decimal=} data.override - The number of units sold (if present, units sold is *not* calculated).
	 */
	class FeeUnits extends Create {
		constructor(data) {
			super(data);

			assert.argumentIsValid(data.fee, 'data.fee', Decimal.getIsNotNegative, 'cannot be negative');
			assert.argumentIsValid(data.price, 'data.price', Decimal.getIsNotNegative, 'cannot be negative');

			if (data.override) {
				assert.argumentIsRequired(data.override, 'data.override', Decimal, 'Decimal');
			}
		}

		get type() {
			return TransactionType.FEE_UNITS;
		}

		_createTransaction(position, transactions, data) {
			let quantity;

			if (data.override) {
				quantity = data.override;
			} else {
				quantity = data.fee.divide(data.price);
			}

			let signedQuantity = quantity.opposite();
			let signedAmount = data.fee.round(position.instrument.currency.precision, Decimal.ROUNDING_MODE.UP);

			let transaction = {
				quantity: signedQuantity,
				amount: signedAmount,
				charge: {
					amount: signedAmount.opposite()
				}
			};

			return transaction;
		}

		toString() {
			return '[FeeUnits]';
		}
	}

	return FeeUnits;
})();