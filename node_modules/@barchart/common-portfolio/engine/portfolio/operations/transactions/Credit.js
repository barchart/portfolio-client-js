const assert = require('@barchart/common-js/lang/assert'),
	Decimal = require('@barchart/common-js/lang/Decimal');

const Create = require('./Create'),
	TransactionType = require('./../../../../data/TransactionType');

module.exports = (() => {
	'use strict';

	/**
	 * Creates a {@link TransactionType.CREDIT} transaction.
	 *
	 * @public
	 * @extends {Create}
	 * @param {Object} data
	 * @param {String} data.user - The user identifier (of the portfolio's owner).
	 * @param {String} data.portfolio - The identifier of the portfolio.
	 * @param {String=} data.position - The identifier of the position (if not supplied, "currency" must be supplied).
	 * @param {Currency=} data.currency - The currency of the cash position (if not supplied, "position" must be supplied).
	 * @param {Day} data.date - The day of the transaction.
	 * @param {Timestamp} data.timestamp - The moment of the transaction.
	 * @param {Decimal} data.amount - The amount of the credit (cannot be negative).
	 */
	class Credit extends Create {
		constructor(data) {
			super(data);

			assert.argumentIsValid(data.amount, 'data.amount', Decimal.getIsNotNegative, 'cannot be negative');
			assert.argumentIsRequired(data.description, 'data.description', String);
		}

		get type() {
			return TransactionType.CREDIT;
		}

		_createTransaction(position, transactions, data) {
			return {
				amount: data.amount,
				quantity: data.amount,
				description: data.description
			};
		}

		toString() {
			return '[Credit]';
		}
	}

	return Credit;
})();