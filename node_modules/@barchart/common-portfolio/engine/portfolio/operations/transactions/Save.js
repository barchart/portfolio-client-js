const assert = require('@barchart/common-js/lang/assert');

const DataOperationStage = require('./../../../DataOperationStage'),
	PortfolioDataOperation = require('./../../PortfolioDataOperation');

module.exports = (() => {
	'use strict';

	/**
	 * Flags a {@link Transaction} for writing to the persistence layer.
	 *
	 * @public
	 * @extends {PortfolioDataOperation}
	 * @param {String} user - The user identifier (of the portfolio's owner).
	 * @param {String} portfolio - The identifier of the portfolio.
	 * @param {String} position - The identifier of the position.
	 * @param {Number} sequence - The sequence number of the transaction.
	 */
	class Save extends PortfolioDataOperation {
		constructor(user, portfolio, position, sequence) {
			super();

			assert.argumentIsRequired(user, 'user', String);
			assert.argumentIsRequired(portfolio, 'portfolio', String);
			assert.argumentIsRequired(position, 'position', String);
			assert.argumentIsRequired(sequence, 'sequence', Number);

			this._user = user;
			this._portfolio = portfolio;
			this._position = position;
			this._sequence = sequence;
		}

		get stage() {
			return DataOperationStage.SAVE;
		}

		_process(dataProvider) {
			return dataProvider.getTransaction(this._user, this._portfolio, this._position, this._sequence)
				.then((transaction) => {
					return dataProvider.saveTransaction(transaction);
				});
		}

		_equals(other) {
			return other instanceof Save && other._user === this._user && other._portfolio === this._portfolio && other._position === this._position && other._sequence === this._sequence;
		}

		toString() {
			return '[Save]';
		}
	}

	return Save;
})();
