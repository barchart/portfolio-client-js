const assert = require('@barchart/common-js/lang/assert');

const DataOperationStage = require('./../../../DataOperationStage'),
	PortfolioDataOperation = require('./../../PortfolioDataOperation'),
	RecalculatePosition = require('./../positions/Recalculate');

module.exports = (() => {
	'use strict';

	/**
	 * Causes the "snapshot" of a {@link Transaction} to be updated.
	 *
	 * @public
	 * @extends {PortfolioDataOperation}
	 * @param {String} user - The user identifier (of the portfolio's owner).
	 * @param {String} portfolio - The identifier of the portfolio.
	 * @param {String} position - The identifier of the position.
	 */
	class Recalculate extends PortfolioDataOperation {
		constructor(user, portfolio, position, sequence) {
			super();

			assert.argumentIsRequired(user, 'user', String);
			assert.argumentIsRequired(portfolio, 'portfolio', String);
			assert.argumentIsRequired(position, 'position', String);
			assert.argumentIsRequired(sequence, 'sequence', Number);

			this._user = user;
			this._portfolio = portfolio;
			this._position = position;
			this._sequence = sequence;
		}

		get stage() {
			return DataOperationStage.INTERRUPT;
		}

		_process(dataProvider) {
			return Promise.all([
				dataProvider.getPositionCalculator(this._user, this._portfolio, this._position),
				dataProvider.getTransaction(this._user, this._portfolio, this._position, this._sequence)
			]).then((results) => {
				const calculator = results[0];
				const transaction = results[1];

				transaction.snapshot = calculator.addTransaction(transaction);

				this._spawn(new RecalculatePosition(this._user, this._portfolio, this._position));
			});
		}

		toString() {
			return '[Recalculate]';
		}
	}

	return Recalculate;
})();
