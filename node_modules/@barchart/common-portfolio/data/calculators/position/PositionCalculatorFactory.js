const log4js = require('log4js');

const Currency = require('@barchart/common-js/lang/Currency'),
	assert = require('@barchart/common-js/lang/assert');

const AverageCost = require('./gains/AverageCost'),
	DirectionTabulator = require('./direction/DirectionTabulator'),
	Fifo = require('./gains/Fifo'),
	IncomeTabulator = require('./income/IncomeTabulator'),
	PositionCalculator = require('./PositionCalculator'),
	TimestampWriter = require('./timestamp/TimestampWriter'),
	ValuationType = require('./../../ValuationType'),
	ValuationWriter = require('./valuation/ValuationWriter');

module.exports = (() => {
	'use strict';

	const logger = log4js.getLogger('portfolio-common/data/calculators/position/PositionCalculatorFactory');

	/**
	 * Utility for creating {@link PositionCalculator} instances.
	 *
	 * @public
	 */
	class PositionCalculatorFactory {
		constructor() {

		}

		/**
		 * Creates a new {@link PositionCalculator} instance of the appropriate type.
		 *
		 * @public
		 * @param {ValuationType} valuationType
		 * @param {Currency} currency
		 * @param {Transaction[]=} transactions
		 * @returns {PositionCalculator}
		 */
		static build(valuationType, currency, transactions) {
			assert.argumentIsRequired(valuationType, 'valuationType', ValuationType, 'ValuationType');
			assert.argumentIsRequired(currency, 'currency', Currency, 'Currency');

			if (!gainFactories.has(valuationType)) {
				throw new Error('Unable to create position calculator [ValuationType=', valuationType.code,']');
			}

			const strategies = [ ];

			const gainFactory = gainFactories.get(valuationType);
			const gainStrategy = gainFactory(currency, transactions);

			strategies.push(new TimestampWriter());
			strategies.push(new ValuationWriter());
			strategies.push(new IncomeTabulator());
			strategies.push(new DirectionTabulator());
			strategies.push(gainStrategy);

			return new PositionCalculator(strategies, currency, transactions);
		}

		toString() {
			return '[PositionCalculatorFactory]';
		}
	}

	const gainFactories = new Map();

	gainFactories.set(ValuationType.AVERAGE_COST, (currency, transactions) => new AverageCost(currency, transactions));
	gainFactories.set(ValuationType.FIFO, (currency, transactions) => new Fifo(currency, transactions));

	return PositionCalculatorFactory;
})();