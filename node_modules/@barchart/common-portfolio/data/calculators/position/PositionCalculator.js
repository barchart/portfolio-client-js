const log4js = require('log4js');

const array = require('@barchart/common-js/lang/array'),
	assert = require('@barchart/common-js/lang/assert'),
	Currency = require('@barchart/common-js/lang/Currency'),
	Decimal = require('@barchart/common-js/lang/Decimal'),
	object = require('@barchart/common-js/lang/object');

const PositionCalculatorStrategy = require('./PositionCalculatorStrategy');

module.exports = (() => {
	'use strict';

	const logger = log4js.getLogger('portfolio-common/data/calculators/position/PositionCalculator');

	class PositionCalculator {
		constructor(strategies, currency, transactions) {
			assert.argumentIsArray(strategies, strategies);
			assert.argumentIsRequired(currency, 'currency', Currency, 'Currency');

			this._strategies = strategies;
			this._currency = currency;

			this._transactions = transactions || [ ];
			this._snapshots = [ ];
		}

		getSnapshot(sequence) {
			assert.argumentIsOptional(sequence, 'sequence', Number, 'Number');

			const sequenceToLookup = sequence || this._transactions.length;

			if (this._snapshots.length < sequenceToLookup) {
				runToSequence.call(this, sequenceToLookup);
			}

			const index = sequenceToLookup - 1;

			return this._snapshots[index];
		}

		addTransaction(transaction) {
			assert.argumentIsRequired(transaction, 'transaction', Object);
			assert.argumentIsValid(transaction, 'transaction', t => t.sequence === this._transactions.length + 1, 'transaction is sequential');

			this._transactions.push(transaction);

			runToSequence.call(this, transaction.sequence);

			return this.getSnapshot();
		}

		toString() {
			return '[PositionCalculator]';
		}
	}

	function runToSequence(sequence) {
		for (let i = this._snapshots.length; i < this._transactions.length && i < sequence; i++) {
			const transaction = this._transactions[i];

			this._snapshots.push(this._strategies.reduce((snapshot, strategy) => Object.assign(snapshot, strategy.calculate(transaction, this._currency)), { }));
		}
	}

	return PositionCalculator;
})();