const log4js = require('log4js');

const Decimal = require('@barchart/common-js/lang/Decimal');

const PositionCalculatorStrategy = require('./../PositionCalculatorStrategy');

module.exports = (() => {
	'use strict';

	const logger = log4js.getLogger('portfolio-common/data/calculators/position/income/IncomeTabulator');

	/**
	 * An income (i.e. dividends, fund distribution, interest, etc) aggregation
	 * strategy.
	 *
	 * @public
	 * @extends {PositionCalculatorStrategy}
	 */
	class IncomeTabulator extends PositionCalculatorStrategy {
		constructor() {
			super();

			this._total = Decimal.ZERO;
		}

		_calculate(transaction, currency) {
			if (transaction.type.income) {
				if (transaction.income) {
					this._total = this._total.add(transaction.income.amount);
				} else if (transaction.dividend) {
					this._total = this._total.add(transaction.dividend.amount);
				}
			}

			return format(this._total);
		}

		toString() {
			return '[IncomeTabulator]';
		}
	}

	function format(income) {
		return {
			income: income
		};
	}

	/**
	 * Summaries income (i.e. dividends, fund distribution, interest, etc).
	 *
	 * @typedef IncomeSnapshot
	 * @type {Object}
	 * @property {Decimal} amount - The current (signed) amount of income earned on the position.
	 */

	return IncomeTabulator;
})();