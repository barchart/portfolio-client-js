const log4js = require('log4js');

const Decimal = require('@barchart/common-js/lang/Decimal');

const PositionCalculatorStrategy = require('./../PositionCalculatorStrategy');

module.exports = (() => {
	'use strict';

	const logger = log4js.getLogger('portfolio-common/data/calculators/position/valuation/ValuationWriter');

	/**
	 * Generates a valuation of the position for a snapshot.
	 *
	 * @public
	 * @extends {PositionCalculatorStrategy}
	 */
	class ValuationWriter extends PositionCalculatorStrategy {
		constructor() {
			super();

			this._currentPosition = Decimal.ZERO;
			this._currentValue = Decimal.ZERO;
		}

		_calculate(transaction, currency) {
			this._currentPosition = this._currentPosition.add(transaction.quantity);

			let value;

			if (transaction.trade && transaction.trade.price) {
				value = transaction.trade.price.multiply(this._currentPosition);
			} else if (transaction.valuation && transaction.valuation.value) {
				value = transaction.valuation.value;
			} else if (!this._currentPosition.getIsZero()) {
				value = this._currentValue;
			} else {
				value = Decimal.ZERO;
			}

			let roundingMode;

			if (value.getIsPositive()) {
				roundingMode = Decimal.ROUNDING_MODE.DOWN;
			} else {
				roundingMode = Decimal.ROUNDING_MODE.UP;
			}

			this._currentValue = value.round(currency.precision, roundingMode);

			return {
				value: this._currentValue
			};
		}

		toString() {
			return '[ValuationWriter]';
		}
	}

	/**
	 * Indicates the day a snapshot was taken on (there could be multiple
	 * snapshots per day).
	 *
	 * @typedef ValuationSnapshot
	 * @type {Object}
	 * @property {Decimal} value - The signed value of the position, as of the last valuation event (e.g. trade, ad hoc valuation, etc).
	 */

	return ValuationWriter;
})();