const log4js = require('log4js');

const Decimal = require('@barchart/common-js/lang/Decimal');

const GainLoss = require('./GainLoss');

module.exports = (() => {
	'use strict';

	const logger = log4js.getLogger('portfolio-common/data/calculators/position/gains/AverageCost');

	/**
	 * A gain (or loss) calculation strategy that uses an average cost
	 * methodology.
	 *
	 * @public
	 * @extends {GainLoss}
	 */
	class AverageCost extends GainLoss {
		constructor() {
			super();

			this._currentPosition = Decimal.ZERO;
			this._currentValue = Decimal.ZERO;

			this._totalOpeningAmount = Decimal.ZERO;
			this._totalClosingAmount = Decimal.ZERO;

			this._totalGain = Decimal.ZERO;
			this._averagePrice = Decimal.ZERO;
		}

		_calculate(transaction, currency) {
			const type = transaction.type;

			const transactionQuantity = transaction.quantity;
			const transactionAmount = transaction.amount;

			this._currentPosition = this._currentPosition.add(transactionQuantity);

			let transactionGain;

			if (type.opening) {
				this._currentValue = this._currentValue.add(transactionAmount);
				this._totalOpeningAmount = this._totalOpeningAmount.add(transactionAmount);

				transactionGain = Decimal.ZERO;
			} else if (type.closing) {
				const transactionValue = transactionQuantity.multiply(this._averagePrice);

				this._currentValue = this._currentValue.add(transactionValue);
				this._totalClosingAmount = this._totalClosingAmount.add(transactionAmount);

				transactionGain = transactionAmount.subtract(transactionValue);
			} else {
				transactionGain = Decimal.ZERO;
			}

			let basis;

			if (this._currentPosition.getIsZero()) {
				basis = Decimal.ZERO;

				this._averagePrice = Decimal.ZERO;
				this._totalGain = this._totalOpeningAmount.add(this._totalClosingAmount);
			} else {
				this._averagePrice = this._currentValue.divide(this._currentPosition);

				basis = this._currentValue;

				let basisRoundingMode;

				if (basis.getIsPositive()) {
					basisRoundingMode = Decimal.ROUNDING_MODE.UP;
				} else {
					basisRoundingMode = Decimal.ROUNDING_MODE.DOWN;
				}

				basis = basis.round(currency.precision, basisRoundingMode);

				this._totalGain = this._totalGain.add(transactionGain);

				let gainRoundingMode;

				if (this._totalGain.getIsPositive()) {
					gainRoundingMode = Decimal.ROUNDING_MODE.DOWN;
				} else {
					gainRoundingMode = Decimal.ROUNDING_MODE.UP;
				}

				this._totalGain = this._totalGain.round(currency.precision, gainRoundingMode);
			}

			return GainLoss.format(this._currentPosition, basis, this._totalGain);
		}

		toString() {
			return '[AverageCost]';
		}
	}

	return AverageCost;
})();